Gremlins based on libmsr and msr-safe fall into a handful of 
design patterns based on when modification and measurement occur.
In each case, the calls to libmsr are put into a library that
leverages the MPI profiling interface (PMPI).  When the application
makes an MPI call, the profiling library may choose to intercept
the call and (among other things) measure or change processor
state using libmsr.  Given this architecture, a gremlin may be
linked into any MPI program without needing to modify the 
application's source code.

The simplest libraries modify and measure at MPI_Init() and 
MPI_Finalize().  Note that this may not be sufficent for measurements
such as accumulated energy where the counter may overflow in a 
relatively short period of time.

The next simplest intercept every MPI call.  The wrap.py script
and scripting language allows these kinds of profiling libraries
to be written with only a handful of lines of code.  Generally,
MPI_Init() and MPI_Finalize() need specialized setup and teardown
code, and every other MPI call is instrumented with identical 
measurement and/or control code.  The downside to this approach
is that several MPI calls may occur in quick succession, well
below the granularity of the taken measurement.

The most complex gremlins rely on a signal handler and timer 
to trigger measurements and control.  This allows user-specific
time granularity and only requires code in MPI_Init() and 
MPI_Finalize().  While this is not appropriate in applications
that already make use of signals directly (or via sleep())
indirectly, the approach works particularly well for measurement.


